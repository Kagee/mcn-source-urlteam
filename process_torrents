#! /bin/bash
SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SOURCE_DIR" || exit
source config.sh

ME="$(basename "${BASH_SOURCE[0]}")"

set -euo pipefail

mkdir -p "$TORRENT_PATH"
mkdir -p "$STORAGE_PATH"
mkdir -p "$CACHE_PATH"

LOG_VERB=1
LOG_INFO=1
LOG_ERROR=1

BREAK="no"

sort identifiers.csv | while read -r IDENTIFIER;
  do
    OUTPUT="$IDENTIFIER.no.xz"
    if [ ! -f "$STORAGE_PATH/$OUTPUT" ]; then
      INFO "Processing $IDENTIFIER, starting download... [$ME]"
      TMP_FOLDER="$(mktemp -d "$STORAGE_PATH/$IDENTIFIER-XXXXXXXXXXX")"
      RC=0
      ./ia download --destdir="$TMP_FOLDER" --verbose "$IDENTIFIER" | sed -e 's/^/[INFO] /' -e "s/$/ [$ME]/" || RC=${?:-}
      if [ $RC -ne 0 ]; then
        echo >&2 "[ERROR] Failed to download $IDENTIFIER, exit code $RC"
        exit "$RC"
      fi

      INFO "Extracting '.no' from *.zip-files to $CACHE_PATH [$ME]"
      find "$TMP_FOLDER/" -type f -name '*.zip' | \
        parallel --jobs 7 "$SOURCE_DIR/cache_zip.sh" "$CACHE_PATH" "{}";

      INFO "Extracting '.no' from *.xz-files to $CACHE_PATH [$ME]"
      find "$TMP_FOLDER/" -type f -name '*.xz' | \
        parallel --jobs 7 "$SOURCE_DIR/cache_xz.sh" "$CACHE_PATH" "{}";

      INFO "Creating uniqe cache for $IDENTIFIER into $STORAGE_PATH/$OUTPUT [$ME]"
      find "$CACHE_PATH" -name '*.xz' -exec xzcat {} \; | sort | uniq | \
        xz --compress --stdout > "$STORAGE_PATH/$OUTPUT.tmp"
      rm "$CACHE_PATH/"*
      mv "$STORAGE_PATH/$OUTPUT.tmp" "$STORAGE_PATH/$OUTPUT"
      rm -r "$TMP_FOLDER"
      INFO "Finished $OUTPUT [$ME]"
    else
      VERB "Found $OUTPUT, not processing $IDENTIFIER again [$ME]"
    fi
done;
