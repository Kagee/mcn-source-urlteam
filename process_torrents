#! /bin/bash
SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SOURCE_DIR" || exit
source config.sh

ME="$(basename "${BASH_SOURCE[0]}")"

set -euo pipefail

mkdir -p "$TORRENT_PATH"
mkdir -p "$STORAGE_PATH"
mkdir -p "$CACHE_PATH"

LOG_VERB=1
LOG_INFO=1
LOG_ERROR=1

BREAK="no"

if [ "--2013" = "${1:-}" ]; then
  IDENTS="URLTeamTorrentRelease2013July"
else
  IDENTS="$(sort -R identifiers.csv)"
fi

if [ ! -f "$PWD/ia" ]; then
  ERROR "Internet Archive downloader (ia) was not found in \$PWD. Download? (Enter or Ctrl-C)"
  read -r FOO
  wget https://archive.org/download/ia-pex/ia
  chmod +x "$PWD/ia"
fi
exit
echo "$IDENTS" | while read -r IDENTIFIER;
  do
    OUTPUT="$IDENTIFIER.no.xz"
    OUTPUT_PATH="$STORAGE_PATH/simple_extract/$OUTPUT"
    if [ ! -f "$OUTPUT_PATH" ]; then
      INFO "Processing $IDENTIFIER, starting download... [$ME]"
      INFO "Starting at $(date +%F-%T)"
      if [ "$IDENTIFIER" != "URLTeamTorrentRelease2013July" ]; then
        TMP_FOLDER="$(mktemp -d "$STORAGE_PATH/$IDENTIFIER-XXXXXXXXXXX")"
      else
        TMP_FOLDER="$STORAGE_PATH/$IDENTIFIER"
      fi
      RC=0
      if [ "$IDENTIFIER" != "URLTeamTorrentRelease2013July" ]; then
        ./ia download --destdir="$TMP_FOLDER" --verbose "$IDENTIFIER" | sed -e 's/^/[INFO] /' -e "s/$/ [$ME]/" || RC=${?:-}
        if [ $RC -ne 0 ]; then
          echo >&2 "[ERROR] Failed to download $IDENTIFIER, exit code $RC"
          exit "$RC"
        fi
      fi
      INFO "Extracting '.no' from *.zip-files to $CACHE_PATH [$ME]"
      find "$TMP_FOLDER/" -type f -name '*.zip' | \
        parallel --jobs 7 "$SOURCE_DIR/cache_zip.sh" "$CACHE_PATH" "{}";

      INFO "Extracting '.no' from *.xz-files to $CACHE_PATH [$ME]"
      find "$TMP_FOLDER/" -type f -name '*.xz' | \
        parallel --jobs 7 "$SOURCE_DIR/cache_xz.sh" "$CACHE_PATH" "{}";

      INFO "Creating uniqe cache for $IDENTIFIER into $OUTPUT_PATH [$ME]"
      find "$CACHE_PATH" -name '*.xz' -exec xzcat {} \; | sort | uniq | \
        xz --compress -T 0 --stdout > "$OUTPUT_PATH.tmp"
      rm "$CACHE_PATH/"*
      mv "$OUTPUT_PATH.tmp" "$OUTPUT_PATH"
      if [ "$IDENTIFIER" != "URLTeamTorrentRelease2013July" ]; then
        # URLTeamTorrentRelease2013July is so large we don't want to delete it
        rm -r "$TMP_FOLDER"
      fi
      INFO "Finished $OUTPUT [$ME]"
    else
      VERB "Found $OUTPUT, not processing $IDENTIFIER again [$ME]"
    fi
done;
